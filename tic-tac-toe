def print_board(board):
    print("\n")
    for row in board:
        print(" | ".join(row))
        print("-" * 5)
    print("\n")

def check_win(board, player):
    # Check rows, columns, diagonals
    for i in range(3):
        if all([cell == player for cell in board[i]]):  # rows
            return True
        if all([board[j][i] == player for j in range(3)]):  # columns
            return True
    if all([board[i][i] == player for i in range(3)]):  # main diagonal
        return True
    if all([board[i][2 - i] == player for i in range(3)]):  # other diagonal
        return True
    return False

def is_draw(board):
    return all([cell in ['X', 'O'] for row in board for cell in row])

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"

    print("üéÆ Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        try:
            move = input(f"Player {current_player}, enter your move (row and column: 1 2): ")
            row, col = map(int, move.split())
            row -= 1
            col -= 1

            if board[row][col] != " ":
                print("‚ö†Ô∏è That cell is already taken. Try again.")
                continue

            board[row][col] = current_player
            print_board(board)

            if check_win(board, current_player):
                print(f"üéâ Player {current_player} wins!")
                break

            if is_draw(board):
                print("ü§ù It's a draw!")
                break

            # Switch player
            current_player = "O" if current_player == "X" else "X"

        except (ValueError, IndexError):
            print("‚ö†Ô∏è Invalid input. Enter two numbers between 1 and 3 separated by a space.")

# Run the game
tic_tac_toe()
